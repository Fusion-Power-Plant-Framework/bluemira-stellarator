# ---
# jupyter:
#   jupytext:
#     cell_metadata_filter: tags,-all
#     notebook_metadata_filter: -jupytext.text_representation.jupytext_version
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#   kernelspec:
#     display_name: Python 3 (ipykernel)
#     language: python
#     name: python3
# ---

# %% tags=["remove-cell"]
# SPDX-FileCopyrightText: 2021-present M. Coleman, J. Cook, F. Franza
# SPDX-FileCopyrightText: 2021-present I.A. Maione, S. McIntosh
# SPDX-FileCopyrightText: 2021-present J. Morris, D. Short
#
# SPDX-License-Identifier: LGPL-2.1-or-later

"""
A stellarator build example.
"""

# %% [markdown]
# # Geometry Tutorial
# ## Introduction
#
# Geometry is not plasma physics, but it isn't trivial either. Chances are most of
# your day-to-day interaction with bluemira will revolve around geometry in some form
# or another. Puns intended.
#
# There a few basic concepts you need to familiarise yourself with:
# * Basic objects: [`BluemiraWire`, `BluemiraFace`, `BluemiraShell`, `BluemiraSolid`]
# * Basic properties
# * Matryoshka structure
# * Geometry creation
# * Geometry modification
# * Geometry operations
#
# ## Imports
#
# Let's start out by importing all the basic objects, and some typical tools

# %%
import json
import os
import sys
from pathlib import Path
from typing import Any, List

sys.path.append(os.path.abspath("../bluemira"))

import matplotlib.pyplot as plt
import numpy as np

from bluemira.base.file import get_bluemira_path

# Some display functionality
from bluemira.display import plotter, show_cad
from bluemira.display.displayer import DisplayCADOptions

# Basic objects
from bluemira.geometry.coordinates import Coordinates
from bluemira.geometry.face import BluemiraFace
from bluemira.geometry.shell import BluemiraShell
from bluemira.geometry.solid import BluemiraSolid
from scipy.spatial.transform import Rotation

# Some useful tools
from bluemira.geometry.tools import (
    boolean_cut,
    boolean_fuse,
    extrude_shape,
    interpolate_bspline,
    make_bspline,
    make_bsplinesurface,
    make_circle,
    make_polygon,
    revolve_shape,
    save_cad,
    sweep_shape,
)
from bluemira.geometry.wire import BluemiraWire

# %% [markdown]
# Creating a 3D representation of a stellarator plasma surface generated by Simsopt


def read_json(file_path: str) -> dict[str, Any]:
    """Read JSON data from a file."""
    with open(file_path) as f:
        return json.load(f)


import numpy as np


def align_to_surface(normal, point_on_surface, width, height):
    # Ensure normal vector is normalized
    normal = normal / np.linalg.norm(normal)

    # Find rotation to align normal with z-axis
    z_axis = np.array([0, 0, 1])
    rotation_vector = np.cross(normal, z_axis)
    rotation_angle = np.arccos(np.dot(normal, z_axis))
    rotation = Rotation.from_rotvec(rotation_vector * rotation_angle)

    # Define a rectangle in the xy-plane
    v1 = np.array([1, 0, 0])
    v2 = np.array([0, 1, 0])

    # Rotate v1 and v2 according to the found rotation
    v1_rotated = rotation.apply(v1)
    v2_rotated = rotation.apply(v2)

    # Calculate points for the rectangle
    points = []
    points.append(
        point_on_surface - 0.5 * width * v1_rotated - 0.5 * height * v2_rotated
    )
    points.append(
        point_on_surface + 0.5 * width * v1_rotated - 0.5 * height * v2_rotated
    )
    points.append(
        point_on_surface + 0.5 * width * v1_rotated + 0.5 * height * v2_rotated
    )
    points.append(
        point_on_surface - 0.5 * width * v1_rotated + 0.5 * height * v2_rotated
    )

    return points


generic_surface_filename = (
    "stellarator_project/data/plasma/finite_plasma_surface_nurbs_data.json"
)
generic_magnet_filename = (
    "stellarator_project/data/magnets/finite_magnets_nurbs_data.json"
)
curve_surface_normals = "stellarator_project/data/magnets/normals_data.json"
# Read in the json data
generic_surface_data = read_json(generic_surface_filename)
generic_magnet_data = read_json(generic_magnet_filename)
curve_surface_normals_data = read_json(curve_surface_normals)

# Create a plasma surface from NURBS surface data
generic_plasma_surface = make_bsplinesurface(
    poles=generic_surface_data["poles2d"],
    mults_u=generic_surface_data["mults_u"],
    mults_v=generic_surface_data["mults_v"],
    knot_vector_u=generic_surface_data["internal_knot_vector_u"],
    knot_vector_v=generic_surface_data["internal_knot_vector_v"],
    degree_u=generic_surface_data["degree_u"],
    degree_v=generic_surface_data["degree_v"],
    weights=generic_surface_data["weights_reshaped"],
    periodic=False,
    check_rational=False,
)
generic_magnet_curves = []

# for curve_dict in generic_magnet_data:
#     magnet_curve = make_bspline(
#         poles=curve_dict["poles"],
#         mults=curve_dict["mults"],
#         knots=curve_dict["internal_knot_vector"],
#         degree=curve_dict["degree"],
#         weights=curve_dict["weights"],
#         periodic=False,
#         check_rational=False,
#     )
#     generic_magnet_curves.append(magnet_curve)


def decode_nurbs_json(json_path: str) -> List[Any]:
    with open(json_path, "r") as f:
        coils_data = json.load(f)

    generic_magnet_curves = []

    for coil in coils_data:
        for coil_name, filaments in coil.items():
            for filament_name, curve_dict in filaments.items():
                print(f"Decoding {coil_name} - {filament_name}...")
                magnet_curve = make_bspline(
                    poles=curve_dict["poles"],
                    mults=curve_dict["mults"],
                    knots=curve_dict["internal_knot_vector"],
                    degree=curve_dict["degree"],
                    weights=curve_dict["weights"],
                    periodic=False,
                    check_rational=False,
                )
                generic_magnet_curves.append(magnet_curve)

    return generic_magnet_curves


generic_magnet_curves = decode_nurbs_json(generic_magnet_filename)


# print((path.discretise()[0][1], path.discretise()[1][1]), path.discretise()[2][1])

# Show the CAD of the plasma surface and magnets.
show_cad(generic_magnet_curves + [generic_plasma_surface])
save_cad(
    generic_magnet_curves + [generic_plasma_surface],
    "plasmastellarator.stp",
)
# show_cad(generic_magnet_curves + [generic_plasma_surface] + generic_magnet_solid)
